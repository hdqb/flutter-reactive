// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library states;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class PageTypeId {
  final int value;
  const PageTypeId._(this.value);

  factory PageTypeId.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum PageTypeId');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 2;
  static bool containsValue(int value) => values.containsKey(value);

  static const PageTypeId NONE = const PageTypeId._(0);
  static const PageTypeId MainPage = const PageTypeId._(1);
  static const PageTypeId SettingsPage = const PageTypeId._(2);
  static get values => {0: NONE,1: MainPage,2: SettingsPage,};

  static const fb.Reader<PageTypeId> reader = const _PageTypeIdReader();

  @override
  String toString() {
    return 'PageTypeId{value: $value}';
  }
}

class _PageTypeIdReader extends fb.Reader<PageTypeId> {
  const _PageTypeIdReader();

  @override
  int get size => 1;

  @override
  PageTypeId read(fb.BufferContext bc, int offset) =>
      new PageTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class User {
  User._(this._bc, this._bcOffset);
  factory User(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<User> reader = const _UserReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get name => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'User{name: $name}';
  }
}

class _UserReader extends fb.TableReader<User> {
  const _UserReader();

  @override
  User createObject(fb.BufferContext bc, int offset) => 
    new User._(bc, offset);
}

class UserBuilder {
  UserBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addNameOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserObjectBuilder extends fb.ObjectBuilder {
  final String _name;

  UserObjectBuilder({
    String name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int nameOffset = fbBuilder.writeString(_name);

    fbBuilder.startTable();
    if (nameOffset != null) {
      fbBuilder.addOffset(0, nameOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class MainPage {
  MainPage._(this._bc, this._bcOffset);
  factory MainPage(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MainPage> reader = const _MainPageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Text get text => Text.reader.vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'MainPage{text: $text}';
  }
}

class _MainPageReader extends fb.TableReader<MainPage> {
  const _MainPageReader();

  @override
  MainPage createObject(fb.BufferContext bc, int offset) => 
    new MainPage._(bc, offset);
}

class MainPageBuilder {
  MainPageBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addTextOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MainPageObjectBuilder extends fb.ObjectBuilder {
  final TextObjectBuilder _text;

  MainPageObjectBuilder({
    TextObjectBuilder text,
  })
      : _text = text;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int textOffset = _text?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (textOffset != null) {
      fbBuilder.addOffset(0, textOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Text {
  Text._(this._bc, this._bcOffset);
  factory Text(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Text> reader = const _TextReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String get count => const fb.StringReader().vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'Text{count: $count}';
  }
}

class _TextReader extends fb.TableReader<Text> {
  const _TextReader();

  @override
  Text createObject(fb.BufferContext bc, int offset) => 
    new Text._(bc, offset);
}

class TextBuilder {
  TextBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addCountOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TextObjectBuilder extends fb.ObjectBuilder {
  final String _count;

  TextObjectBuilder({
    String count,
  })
      : _count = count;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int countOffset = fbBuilder.writeString(_count);

    fbBuilder.startTable();
    if (countOffset != null) {
      fbBuilder.addOffset(0, countOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class SettingsPage {
  SettingsPage._(this._bc, this._bcOffset);
  factory SettingsPage(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SettingsPage> reader = const _SettingsPageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'SettingsPage{}';
  }
}

class _SettingsPageReader extends fb.TableReader<SettingsPage> {
  const _SettingsPageReader();

  @override
  SettingsPage createObject(fb.BufferContext bc, int offset) => 
    new SettingsPage._(bc, offset);
}

class SettingsPageObjectBuilder extends fb.ObjectBuilder {

  SettingsPageObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.startTable();
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class Root {
  Root._(this._bc, this._bcOffset);
  factory Root(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Root> reader = const _RootReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  User get user => User.reader.vTableGet(_bc, _bcOffset, 4, null);
  PageTypeId get pageType => new PageTypeId.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  dynamic get page {
    switch (pageType?.value) {
      case 1: return MainPage.reader.vTableGet(_bc, _bcOffset, 8, null);
      case 2: return SettingsPage.reader.vTableGet(_bc, _bcOffset, 8, null);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'Root{user: $user, pageType: $pageType, page: $page}';
  }
}

class _RootReader extends fb.TableReader<Root> {
  const _RootReader();

  @override
  Root createObject(fb.BufferContext bc, int offset) => 
    new Root._(bc, offset);
}

class RootBuilder {
  RootBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addUserOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPageType(PageTypeId pageType) {
    fbBuilder.addUint8(1, pageType?.value);
    return fbBuilder.offset;
  }
  int addPageOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RootObjectBuilder extends fb.ObjectBuilder {
  final UserObjectBuilder _user;
  final PageTypeId _pageType;
  final dynamic _page;

  RootObjectBuilder({
    UserObjectBuilder user,
    PageTypeId pageType,
    dynamic page,
  })
      : _user = user,
        _pageType = pageType,
        _page = page;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int userOffset = _user?.getOrCreateOffset(fbBuilder);
    final int pageOffset = _page?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (userOffset != null) {
      fbBuilder.addOffset(0, userOffset);
    }
    fbBuilder.addUint8(1, _pageType?.value);
    if (pageOffset != null) {
      fbBuilder.addOffset(2, pageOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
